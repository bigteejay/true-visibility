/*! true-visibility v0.2.0 | (c) 2016-2016 : MIT license - https://github.com/bigteejay/true-visibility/license.txt */
!function(t,e){"function"==typeof define&&define.amd?define("true-visibility",[],e):"object"==typeof module&&module.exports?module.exports=e():t.isVisible=e()}(this,function(){var t=function(t){"use strict";var e=2;"string"==typeof t&&(t=document.querySelector(t));var r=function(t){for(;t=t.parentNode;)if(t===document)return!0;return!1},n=function(t){var r=getComputedStyle(t);if("0"===r.opacity||"none"===r.display||"hidden"===r.visibility)return!1;var o=t.parentNode;if(o){if(o===document)return!0;var i=getComputedStyle(o),u=i.overflow,f=t.getBoundingClientRect(),d=o.getBoundingClientRect();if("hidden"===u||"scroll"===u){var l=f.top+e>=d.top&&f.right-e<=d.right+o.scrollLeft&&f.bottom-e<=d.bottom+o.scrollTop&&f.left+e>=d.left;if(!l)return!1}return n(o)}return!0};return!(!t||!r(t))&&n(t)};return t});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRydWUtdmlzaWJpbGl0eS5qcyJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImRlZmluZSIsImFtZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpc1Zpc2libGUiLCJ0aGlzIiwiX2VsIiwiVklTSUJMRV9QQURESU5HIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiX2luRG9jdW1lbnQiLCJlbGVtZW50IiwicGFyZW50Tm9kZSIsIl9pc1Zpc2libGUiLCJlbCIsInN0eWxlIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIm9wYWNpdHkiLCJkaXNwbGF5IiwidmlzaWJpbGl0eSIsInAiLCJwU3R5bGUiLCJwT3ZlcmZsb3ciLCJvdmVyZmxvdyIsImNSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwicFJlY3QiLCJpblNjcm9sbGFibGVCb3VuZHMiLCJ0b3AiLCJyaWdodCIsInNjcm9sbExlZnQiLCJib3R0b20iLCJzY3JvbGxUb3AiLCJsZWZ0Il0sIm1hcHBpbmdzIjoiO0NBZUUsU0FBVUEsRUFBTUMsR0FFUyxrQkFBWEMsU0FBeUJBLE9BQU9DLElBRXhDRCxPQUFRLHFCQUF1QkQsR0FFUCxnQkFBWEcsU0FBdUJBLE9BQU9DLFFBRTNDRCxPQUFPQyxRQUFVSixJQUlqQkQsRUFBS00sVUFBWUwsS0FHdkJNLEtBQU0sV0FFSixHQUFJRCxHQUFZLFNBQVVFLEdBRXRCLFlBRUEsSUFBSUMsR0FBa0IsQ0FLRixpQkFBUkQsS0FFUkEsRUFBTUUsU0FBU0MsY0FBZUgsR0FZbEMsSUFBSUksR0FBYyxTQUFVQyxHQUd4QixLQUFRQSxFQUFVQSxFQUFRQyxZQUd0QixHQUFLRCxJQUFZSCxTQUViLE9BQU8sQ0FHZixRQUFPLEdBYVBLLEVBQWEsU0FBVUMsR0FFdkIsR0FBSUMsR0FBUUMsaUJBQWtCRixFQUU5QixJQUF1QixNQUFsQkMsRUFBTUUsU0FBcUMsU0FBbEJGLEVBQU1HLFNBQ1gsV0FBckJILEVBQU1JLFdBRU4sT0FBTyxDQUdYLElBQUlDLEdBQUlOLEVBQUdGLFVBRVgsSUFBS1EsRUFDTCxDQUNJLEdBQUtBLElBQU1aLFNBRVAsT0FBTyxDQUdYLElBQUlhLEdBQWNMLGlCQUFrQkksR0FDaENFLEVBQWNELEVBQU9FLFNBRXJCQyxFQUFjVixFQUFHVyx3QkFDakJDLEVBQWNOLEVBQUVLLHVCQU1wQixJQUFtQixXQUFkSCxHQUF3QyxXQUFkQSxFQUMvQixDQUNJLEdBQUlLLEdBQ0FILEVBQU1JLElBQU1yQixHQUFtQm1CLEVBQU1FLEtBQ3JDSixFQUFNSyxNQUFRdEIsR0FBbUJtQixFQUFNRyxNQUFRVCxFQUFFVSxZQUNqRE4sRUFBTU8sT0FBU3hCLEdBQW1CbUIsRUFBTUssT0FBU1gsRUFBRVksV0FDbkRSLEVBQU1TLEtBQU8xQixHQUFtQm1CLEVBQU1PLElBSTFDLEtBQU1OLEVBQ0YsT0FBTyxFQUlmLE1BQU9kLEdBQVlPLEdBR3ZCLE9BQU8sRUFPWCxVQUFNZCxJQUFRSSxFQUFhSixLQUtwQk8sRUFBWVAsR0FHdkIsT0FBT0YiLCJmaWxlIjoidHJ1ZS12aXNpYmlsaXR5Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvbmZpZ3VyZSBKU0hpbnRcbi8vICBQcmVkZWZpbmVkIGdsb2JhbHMsIGZhbHNlID0gcmVhZCBvbmx5XG4vKiBnbG9iYWxzIGdldENvbXB1dGVkU3R5bGU6ZmFsc2UgKi9cblxuXG5cbi8qKlxuICogIyMgaXNWaXNpYmxlXG4gKlxuICogQGF1dGhvciBKYXNvbiBGYXJyZWxsIChodHRwOi8vdXNlYWxsZml2ZS5jb20vKVxuICogQGF1dGhvciBNb3VzZSBCcmF1biAobW91c2VAa25vYmxhdS5jaClcbiAqIEBhdXRob3IgYmlndGVlamF5ICh0d2pvaG5zb0Bob3RtYWlsLmNvbSlcbiAqXG4gKiBDaGVja3MgaWYgYSBET00gZWxlbWVudCBpcyB0cnVseSB2aXNpYmxlLlxuICovXG4oIGZ1bmN0aW9uKCByb290LCBmYWN0b3J5IClcbntcbiAgICBpZiAoIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCApXG4gICAge1xuICAgICAgICBkZWZpbmUoICd0cnVlLXZpc2liaWxpdHknLCBbXSwgZmFjdG9yeSApO1xuICAgIH1cbiAgICBlbHNlIGlmICggdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMgKVxuICAgIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfVxuICAgIGVsc2VcbiAgICB7XG4gICAgICAgIHJvb3QuaXNWaXNpYmxlID0gZmFjdG9yeSgpO1xuICAgIH1cbn1cbiggdGhpcywgZnVuY3Rpb24oKVxue1xuICAgIHZhciBpc1Zpc2libGUgPSBmdW5jdGlvbiggX2VsIClcbiAgICB7XG4gICAgICAgICd1c2Ugc3RyaWN0JztcbiAgICAgICAgXG4gICAgICAgIHZhciBWSVNJQkxFX1BBRERJTkcgPSAyO1xuXG4gICAgICAgIC8qXG4gICAgICAgICAqIGFsbG93cyBzZWxlY3RvciBzdHJpbmdzXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoIHR5cGVvZiBfZWwgPT09ICdzdHJpbmcnIClcbiAgICAgICAge1xuICAgICAgICAgICAgX2VsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvciggX2VsICk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogIyMgaW5Eb2N1bWVudFxuICAgICAgICAgKlxuICAgICAgICAgKiBjaGVja3MgaWYgYW4gZWxlbWVudCBpcyBpbiB0aGUgZG9jdW1lbnRcbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHtET01FbGVtZW50fSBlbGVtZW50IGVsZW1lbnQgdG8gY2hlY2tcbiAgICAgICAgICpcbiAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn0gaW4gZG9jdW1lbnQgb3Igbm90XG4gICAgICAgICAqL1xuICAgICAgICB2YXIgX2luRG9jdW1lbnQgPSBmdW5jdGlvbiggZWxlbWVudCApXG4gICAgICAgIHtcbiAgICAgICAgICAgIC8qanNoaW50IC1XMDg0ICovXG4gICAgICAgICAgICB3aGlsZSAoIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGUgKVxuICAgICAgICAgICAgLypqc2hpbnQgK1cwODQgKi9cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBpZiAoIGVsZW1lbnQgPT09IGRvY3VtZW50IClcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogIyMgX2lzVmlzaWJsZVxuICAgICAgICAgKlxuICAgICAgICAgKiBDaGVja3MgaWYgYSBET00gZWxlbWVudCBpcyB2aXNpYmxlLiBUYWtlcyBpbnRvXG4gICAgICAgICAqIGNvbnNpZGVyYXRpb24gaXRzIHBhcmVudHMgYW5kIG92ZXJmbG93LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0ge0RPTUVsZW1lbnR9IGVsIHRoZSBET00gZWxlbWVudCB0byBjaGVjayBpZiBpcyB2aXNpYmxlXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm4gX0Jvb2xlYW5fIFtkZXNjcmlwdGlvbl1cbiAgICAgICAgICovXG4gICAgICAgIHZhciBfaXNWaXNpYmxlID0gZnVuY3Rpb24oIGVsIClcbiAgICAgICAge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZSggZWwgKTtcblxuICAgICAgICAgICAgaWYgKCBzdHlsZS5vcGFjaXR5ID09PSAnMCcgfHwgc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnIHx8XG4gICAgICAgICAgICAgICAgc3R5bGUudmlzaWJpbGl0eSA9PT0gJ2hpZGRlbicgKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHAgPSBlbC5wYXJlbnROb2RlO1xuXG4gICAgICAgICAgICBpZiAoIHAgKVxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGlmICggcCA9PT0gZG9jdW1lbnQgKVxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmFyIHBTdHlsZSAgICAgID0gZ2V0Q29tcHV0ZWRTdHlsZSggcCApO1xuICAgICAgICAgICAgICAgIHZhciBwT3ZlcmZsb3cgICA9IHBTdHlsZS5vdmVyZmxvdztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgY1JlY3QgICAgICAgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICAgICAgICB2YXIgcFJlY3QgICAgICAgPSBwLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogY2hlY2sgaWYgdGhlIHRhcmdldCBlbGVtZW50IGlzIHRvIHRoZSByaWdodCwgbGVmdCwgdW5kZXIsIG9yXG4gICAgICAgICAgICAgICAgICogYWJvdmUgaXQncyBwYXJlbnRcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBpZiAoIHBPdmVyZmxvdyA9PT0gJ2hpZGRlbicgfHwgcE92ZXJmbG93ID09PSAnc2Nyb2xsJyApXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5TY3JvbGxhYmxlQm91bmRzID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgY1JlY3QudG9wICsgVklTSUJMRV9QQURESU5HID49IHBSZWN0LnRvcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY1JlY3QucmlnaHQgLSBWSVNJQkxFX1BBRERJTkcgPD0gcFJlY3QucmlnaHQgKyBwLnNjcm9sbExlZnQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNSZWN0LmJvdHRvbSAtIFZJU0lCTEVfUEFERElORyA8PSBwUmVjdC5ib3R0b20gKyBwLnNjcm9sbFRvcCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgY1JlY3QubGVmdCArIFZJU0lCTEVfUEFERElORyA+PSBwUmVjdC5sZWZ0XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLy0tIE91ciB0YXJnZXQgZWxlbWVudCBpcyBvdXQgb2YgYm91bmRzXG4gICAgICAgICAgICAgICAgICAgIGlmICggIWluU2Nyb2xsYWJsZUJvdW5kcyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBfaXNWaXNpYmxlKCBwICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qXG4gICAgICAgICAqIG9ubHkgY2hlY2sgb25jZS4gIGl0J3MgcGFyZW50cyBhcmVuJ3QgZ29pbmcgdG8gYmUgYW55IG1vcmUgb3IgbGVzcyBpblxuICAgICAgICAgKiB0aGUgZG9jdW1lbnRcbiAgICAgICAgICovXG4gICAgICAgIGlmICggIV9lbCB8fCAhX2luRG9jdW1lbnQoIF9lbCApIClcbiAgICAgICAge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9pc1Zpc2libGUoIF9lbCApO1xuICAgIH07XG5cbiAgICByZXR1cm4gaXNWaXNpYmxlO1xufSApICk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
